import logging

from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton, \
                          InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import config
from database import Database


# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename="all_log.log", level=logging.INFO, format='%(asctime)s - %(levelname)s -%(message)s')
warning_log = logging.getLogger("warning_log")
warning_log.setLevel(logging.WARNING)

fh = logging.FileHandler("warning_log.log")

formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)


warning_log.addHandler(fh)

API_TOKEN = config.TOKEN

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot,storage=MemoryStorage())

db = Database('db_model.db')


@dp.message_handler(commands=['start', 'help'], state='*')
async def start(message: types.Message):
    try:
        button_profile = KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüë§') # Done!
        button_add_mood = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º—É–¥üìù') # Done!
        button_rating = KeyboardButton('–†–µ–π—Ç–∏–Ω–≥üèÜ') # Done!
        button_feed = KeyboardButton('–õ–µ–Ω—Ç–∞üì∞') # 50 / 50 —Ñ–∏–∫—Å –±–∞–≥ —Å —Ç–µ–º —á—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π –º—É–¥

        menu = ReplyKeyboardMarkup()
        menu.add(button_add_mood, button_profile, button_rating, button_feed)

        db.add_user(name=message.from_user.first_name, telegram_username=message.from_user.username)
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name.title()}!üëã\n\n" \
                             f"–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç Moodüòé\n–ú–µ—Å—Ç–æ, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –º—É–¥–æ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n" \
                             f"–ò –Ω–µ –≤–∞–∂–Ω–æ —á—ë—Ä–Ω—ã–π –æ–Ω –∏–ª–∏ –±–µ–ª—ã–π :)", reply_markup=menu)
    except Exception as e:
        warning_log.warning(e)


@dp.message_handler(lambda message: message.text.lower().startswith('–ø—Ä–æ—Ñ–∏–ª—å'), state='*')
async def profile(message: types.Message):
    try:
        await message.answer(f'–í–∞—à –Ω–∏–∫ - {db.show_info_user(info_param="name",telegram_username=message.from_user.username).title()}\n' \
                             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ - {db.show_info_user(info_param="points", telegram_username=message.from_user.username)}\n' \
                             f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É–¥–æ–≤ - {db.show_info_user(info_param="count_moods", telegram_username=message.from_user.username)}\n')
    except Exception as e:
        warning_log.warning(e)


# –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
class MoodParams(StatesGroup):
    type = State()
    text = State()


@dp.message_handler(lambda message: message.text.lower().startswith('–¥–æ–±–∞–≤–∏—Ç—å –º—É–¥'), state='*')
async def add_mood(message: types.Message):
    button_white_mood = KeyboardButton('ü§ç')
    button_black_mood = KeyboardButton('üñ§')

    types_mood = ReplyKeyboardMarkup(one_time_keyboard=True)
    types_mood.add(button_black_mood, button_white_mood)

    await message.answer('–ù–∞–ø–∏—à–∏ —Ç–∏–ø —Å–≤–æ–µ–≥–æ –º—É–¥–∞\n–û–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–ª—ã–º - ü§ç\n–ê –º–æ–∂–µ—Ç –±—ã—Ç—å —á—ë—Ä–Ω—ã–º - üñ§',reply_markup=types_mood)
    await MoodParams.type.set()


@dp.message_handler(state=MoodParams.type)
async def input_mood_type(message: types.Message, state: FSMContext):
    await state.update_data(type=message.text)
    await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ —Å–≤–æ–π –º—É–¥ –ø–∞—Ä–æ—á–∫–æ–π —Å–ª–æ–≤')
    await MoodParams.next()


@dp.message_handler(state=MoodParams.text)
async def input_mood_text(message: types.Message, state: FSMContext):
    try:
        await state.update_data(text=message.text)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ!\n–¢–≤–æ–π –º—É–¥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω')
        user_data = await state.get_data() # —Å–ª–æ–≤–∞—Ä—å —Å –≤—Å–µ–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
        db.add_mood(text=user_data['text'], type=user_data['type'], telegram_username=message.from_user.username) # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –¥–±
        await state.finish()
        await start(message)
    except Exception as e:
        warning_log.warning(e)


# TODO : –æ–±–µ—Ä–Ω—É—Ç—å –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä 
@dp.message_handler(commands=['exit'], state='*')
async def exit(message: types.Message, state: FSMContext):
    await state.finish()
    await start(message)


@dp.message_handler(lambda message: message.text.lower().startswith('—Ä–µ–π—Ç–∏–Ω–≥'), state='*')
async def show_rating(message: types.Message):
    try:
        place_num = 1
        rating = ''
        for place in db.show_rating():
            rating += f'{place_num} –º–µ—Å—Ç–æ - {db.show_info_user("name",place[0]).title()}'
            place_num += 1
        await message.answer(rating)
    except Exception as e:
        warning_log.warning(e)


@dp.message_handler(lambda message: message.text.startswith('–õ–µ–Ω—Ç–∞'), state='*')
async def show_mood_feed(message: types.Message):
    button_like = KeyboardButton('‚ù§')
    button_next= KeyboardButton('‚û°')

    menu = ReplyKeyboardMarkup()
    menu.add(button_like, button_next)

    await message.answer(f'{"üñ§" if db.show_info_mood(db.show_info_user("last_view_mood",message.from_user.username))[0] == "0" else "ü§ç"}\n{db.show_info_mood(db.show_info_user("last_view_mood",message.from_user.username))[2]}',reply_markup=menu)


@dp.message_handler(lambda message: message.text.startswith('‚û°'), state='*')
async def show_mood_feed_next(message: types.Message):
    try:
        await message.answer(
            f'{"üñ§" if db.show_info_mood(db.show_info_user("last_view_mood",message.from_user.username))[0] == "0" else "ü§ç"}\n{db.show_info_mood(db.show_info_user("last_view_mood", message.from_user.username) + 1)[2]}')
    except TypeError:
        db.update_info_user(info_param='last_view_mood',info_param_value=1,telegram_username=message.from_user.username)
        await message.answer(
            f'{"üñ§" if db.show_info_mood(db.show_info_user("last_view_mood",message.from_user.username))[0] == "0" else "ü§ç"}\n{db.show_info_mood(db.show_info_user("last_view_mood", message.from_user.username))[2]}')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)