import logging
import os

from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.dispatcher import Dispatcher
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from aiogram.types import ReplyKeyboardRemove,ReplyKeyboardMarkup, KeyboardButton, \
                          InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import config
from database import Database


logging.basicConfig(level=logging.INFO)

API_TOKEN = config.TOKEN

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot,storage=MemoryStorage())

db = Database('db_model.db')


@dp.message_handler(commands=['start', 'help'], state='*')
async def start(message: types.Message):
    button_profile = KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—åüë§')
    button_add_mood = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º—É–¥üìù')

    menu = ReplyKeyboardMarkup()
    menu.add(button_add_mood, button_profile)

    db.add_user(name=message.from_user.first_name, telegram_username=message.from_user.username)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name.title()}!üëã\n\n" \
                         f"–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç Moodüòé\n–ú–µ—Å—Ç–æ, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º –º—É–¥–æ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n" \
                         f"–ò –Ω–µ –≤–∞–∂–Ω–æ —á—ë—Ä–Ω—ã–π –æ–Ω –∏–ª–∏ –±–µ–ª—ã–π :)", reply_markup=menu)

@dp.message_handler(lambda message: message.text.lower().startswith('–ø—Ä–æ—Ñ–∏–ª—å'), state='*')
async def profile(message: types.Message):
    await message.answer(f'–í–∞—à –Ω–∏–∫ - {db.show_info_user(info_param="name",telegram_username=message.from_user.username).title()}\n' \
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ - {db.show_info_user(info_param="points", telegram_username=message.from_user.username)}\n' \
                         f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É–¥–æ–≤ - {db.show_info_user(info_param="count_moods", telegram_username=message.from_user.username)}\n')

# –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—à–∏–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
class MoodParams(StatesGroup):
    type = State()
    text = State()

@dp.message_handler(lambda message: message.text.lower().startswith('–¥–æ–±–∞–≤–∏—Ç—å –º—É–¥'), state='*')
async def add_mood(message: types.Message):
    button_white_mood = KeyboardButton('ü§ç')
    button_black_mood = KeyboardButton('üñ§')

    types_mood = ReplyKeyboardMarkup(one_time_keyboard=True)
    types_mood.add(button_black_mood, button_white_mood)

    await message.answer('–ù–∞–ø–∏—à–∏ —Ç–∏–ø —Å–≤–æ–µ–≥–æ –º—É–¥–∞\n–û–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ–ª—ã–º - ü§ç\n–ê –º–æ–∂–µ—Ç –±—ã—Ç—å —á—ë—Ä–Ω—ã–º - üñ§',reply_markup=types_mood)
    await MoodParams.type.set()

@dp.message_handler(state=MoodParams.type)
async def mood_type(message: types.Message, state: FSMContext):
    await state.update_data(type=message.text)
    await message.answer('–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏ —Å–≤–æ–π –º—É–¥ –ø–∞—Ä–æ—á–∫–æ–π —Å–ª–æ–≤')
    await MoodParams.next()

@dp.message_handler(state=MoodParams.text)
async def mood_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ!\n–¢–≤–æ–π –º—É–¥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω')
    user_data = await state.get_data() # —Å–ª–æ–≤–∞—Ä—å —Å –≤—Å–µ–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
    db.add_mood(text=user_data['text'], type=user_data['type'], telegram_username=message.from_user.username) # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –¥–±
    await state.finish()
    await start(message)



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)